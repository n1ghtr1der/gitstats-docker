pipeline {
    agent any

    environment {
        SSH_CREDENTIALS = credentials('devops-key')
        DOCKERFILE = credentials('gitstats-dockerfile')
        BUCKET_NAME = 'gitstats.metaclassroom.app.br'

        REPOSITORY_PREFIX = 'git@ssh.dev.azure.com:v3/lds-ifce/RESTIC12%20e%20METARECOG'

        REPOSITORY_NAME_DATASET_API = 'data-set-api'
        REPOSITORY_NAME_METARECOG = 'metarecog'
        REPOSITORY_NAME_METARECOG_UNITY = 'metarecog-unity'
    }

    stages {
        stage('Creating Dockerfile') {
            steps {
                sh 'cat ${DOCKERFILE} > ./Dockerfile'
            }
        }
        stage('Iosi') {
            parallel {
                stage('data-set-api') {
                    stages {
                        stage('Building data-set-api image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_DATASET_API} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_DATASET_API} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=main . -t gitstats-image:${REPOSITORY_NAME_DATASET_API}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_DATASET_API} -d gitstats-image:${REPOSITORY_NAME_DATASET_API} tail -f /dev/null && \
                                mkdir -p ${REPOSITORY_NAME_DATASET_API} && docker cp ${REPOSITORY_NAME_DATASET_API}:/stats ./${REPOSITORY_NAME_DATASET_API}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_DATASET_API}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_DATASET_API} s3://${BUCKET_NAME}/${REPOSITORY_NAME_DATASET_API} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('metarecog') {
                    stages {
                        stage('Building metarecog image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_METARECOG} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_METARECOG} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=develop . -t gitstats-image:${REPOSITORY_NAME_METARECOG}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_METARECOG} -d gitstats-image:${REPOSITORY_NAME_METARECOG} tail -f /dev/null && \
                                mkdir -p ${REPOSITORY_NAME_METARECOG} && docker cp ${REPOSITORY_NAME_METARECOG}:/stats ./${REPOSITORY_NAME_METARECOG}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_METARECOG}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_METARECOG} s3://${BUCKET_NAME}/${REPOSITORY_NAME_METARECOG} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('metarecog-unity') {
                    stages {
                        stage('Building metarecog-unity image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_METARECOG_UNITY} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_METARECOG_UNITY} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=development . -t gitstats-image:${REPOSITORY_NAME_METARECOG_UNITY}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_METARECOG_UNITY} -d gitstats-image:${REPOSITORY_NAME_METARECOG_UNITY} tail -f /dev/null && \
                                mkdir -p ${REPOSITORY_NAME_METARECOG_UNITY} && docker cp ${REPOSITORY_NAME_METARECOG_UNITY}:/stats ./${REPOSITORY_NAME_METARECOG_UNITY}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-ecr']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_METARECOG_UNITY}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_METARECOG_UNITY} s3://${BUCKET_NAME}/${REPOSITORY_NAME_METARECOG_UNITY} --recursive'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        cleanup {
            sh '''
                docker container prune -f
                docker rm $(docker ps -aq) -f
                docker rmi $(docker images -aq) -f
                docker images
            '''
            dir("${WORKSPACE}@tmp") { deleteDir() }
            deleteDir()
        }
    }
}