pipeline {
    agent any

    environment {
        SSH_CREDENTIALS = credentials('devops-key')
        DOCKERFILE = credentials('gitstats-dockerfile')
        BUCKET_NAME = 'gitstats.iosi.com.br'

        REPOSITORY_PREFIX = 'git@ssh.dev.azure.com:v3/lds-ifce/IOSI'

        REPOSITORY_NAME_ADMIN_FRONTEND = 'portal-iosi-admin-frontend'
        REPOSITORY_NAME_LIVE_BACKEND = 'portal-iosi-live-backend'
        REPOSITORY_NAME_LIVE_FRONTEND = 'portal-iosi-live-frontend'
        REPOSITORY_NAME_IOSIMAIS_BACKEND = 'portal-iosimais-backend'
        REPOSITORY_NAME_IOSIMAIS_FRONTEND = 'portal-iosimais-frontend'
        REPOSITORY_NAME_SCHEDULE_BACKEND = 'portal-schedule-computer'
        REPOSITORY_NAME_SCHEDULE_FRONTEND = 'portal-schedule-computer-frontend'

    }

    stages {
        stage('Creating Dockerfile') {
            steps {
                sh 'cat ${DOCKERFILE} > ./Dockerfile'
            }
        }
        stage('Iosi') {
            parallel {
                stage('portal-iosi-admin-frontend') {
                    stages {
                        stage('Building portal-iosi-admin-frontend image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_ADMIN_FRONTEND} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_ADMIN_FRONTEND} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=develop . -t gitstats-image:${REPOSITORY_NAME_ADMIN_FRONTEND}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_ADMIN_FRONTEND} -d gitstats-image:${REPOSITORY_NAME_ADMIN_FRONTEND} tail -f /dev/null && \
                                mkdir ${REPOSITORY_NAME_ADMIN_FRONTEND} && docker cp ${REPOSITORY_NAME_ADMIN_FRONTEND}:/stats ./${REPOSITORY_NAME_ADMIN_FRONTEND}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'profile-iosi-aws']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_ADMIN_FRONTEND}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_ADMIN_FRONTEND} s3://${BUCKET_NAME}/${REPOSITORY_NAME_ADMIN_FRONTEND} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('portal-iosi-live-backend') {
                    stages {
                        stage('Building portal-iosi-live-backend image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_LIVE_BACKEND} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_LIVE_BACKEND} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=dev . -t gitstats-image:${REPOSITORY_NAME_LIVE_BACKEND}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_LIVE_BACKEND} -d gitstats-image:${REPOSITORY_NAME_LIVE_BACKEND} tail -f /dev/null && \
                                mkdir ${REPOSITORY_NAME_LIVE_BACKEND} && docker cp ${REPOSITORY_NAME_LIVE_BACKEND}:/stats ./${REPOSITORY_NAME_LIVE_BACKEND}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'profile-iosi-aws']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_LIVE_BACKEND}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_LIVE_BACKEND} s3://${BUCKET_NAME}/${REPOSITORY_NAME_LIVE_BACKEND} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('portal-iosi-live-frontend') {
                    stages {
                        stage('Building portal-iosi-live-frontend image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_LIVE_FRONTEND} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_LIVE_FRONTEND} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=develop . -t gitstats-image:${REPOSITORY_NAME_LIVE_FRONTEND}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_LIVE_FRONTEND} -d gitstats-image:${REPOSITORY_NAME_LIVE_FRONTEND} tail -f /dev/null && \
                                mkdir ${REPOSITORY_NAME_LIVE_FRONTEND} && docker cp ${REPOSITORY_NAME_LIVE_FRONTEND}:/stats ./${REPOSITORY_NAME_LIVE_FRONTEND}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'profile-iosi-aws']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_LIVE_FRONTEND}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_LIVE_FRONTEND} s3://${BUCKET_NAME}/${REPOSITORY_NAME_LIVE_FRONTEND} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('portal-iosimais-backend') {
                    stages {
                        stage('Building portal-iosimais-backend image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_IOSIMAIS_BACKEND} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_IOSIMAIS_BACKEND} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=feature/6901/quiz-chapter . -t gitstats-image:${REPOSITORY_NAME_IOSIMAIS_BACKEND}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_IOSIMAIS_BACKEND} -d gitstats-image:${REPOSITORY_NAME_IOSIMAIS_BACKEND} tail -f /dev/null && \
                                mkdir ${REPOSITORY_NAME_IOSIMAIS_BACKEND} && docker cp ${REPOSITORY_NAME_IOSIMAIS_BACKEND}:/stats ./${REPOSITORY_NAME_IOSIMAIS_BACKEND}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'profile-iosi-aws']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_IOSIMAIS_BACKEND}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_IOSIMAIS_BACKEND} s3://${BUCKET_NAME}/${REPOSITORY_NAME_IOSIMAIS_BACKEND} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('portal-iosimais-frontend') {
                    stages {
                        stage('Building portal-iosimais-frontend image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_IOSIMAIS_FRONTEND} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_IOSIMAIS_FRONTEND} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=feature/newQuiz . -t gitstats-image:${REPOSITORY_NAME_IOSIMAIS_FRONTEND}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_IOSIMAIS_FRONTEND} -d gitstats-image:${REPOSITORY_NAME_IOSIMAIS_FRONTEND} tail -f /dev/null && \
                                mkdir ${REPOSITORY_NAME_IOSIMAIS_FRONTEND} && docker cp ${REPOSITORY_NAME_IOSIMAIS_FRONTEND}:/stats ./${REPOSITORY_NAME_IOSIMAIS_FRONTEND}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'profile-iosi-aws']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_IOSIMAIS_FRONTEND}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_IOSIMAIS_FRONTEND} s3://${BUCKET_NAME}/${REPOSITORY_NAME_IOSIMAIS_FRONTEND} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('portal-schedule-computer') {
                    stages {
                        stage('Building portal-schedule-computer image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_SCHEDULE_BACKEND} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_SCHEDULE_BACKEND} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=develop . -t gitstats-image:${REPOSITORY_NAME_SCHEDULE_BACKEND}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_SCHEDULE_BACKEND} -d gitstats-image:${REPOSITORY_NAME_SCHEDULE_BACKEND} tail -f /dev/null && \
                                mkdir ${REPOSITORY_NAME_SCHEDULE_BACKEND} && docker cp ${REPOSITORY_NAME_SCHEDULE_BACKEND}:/stats ./${REPOSITORY_NAME_SCHEDULE_BACKEND}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'profile-iosi-aws']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_SCHEDULE_BACKEND}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_SCHEDULE_BACKEND} s3://${BUCKET_NAME}/${REPOSITORY_NAME_SCHEDULE_BACKEND} --recursive'
                                }
                            }
                        }
                    }
                }
                stage('portal-schedule-computer-frontend') {
                    stages {
                        stage('Building portal-schedule-computer-frontend image') {
                            steps {
                                sh '''docker build  --build-arg REPO=${REPOSITORY_PREFIX}/${REPOSITORY_NAME_SCHEDULE_FRONTEND} \
                                --build-arg REPO_NAME=${REPOSITORY_NAME_SCHEDULE_FRONTEND} --build-arg SSH_PRV_KEY="$(cat ${SSH_CREDENTIALS})" \
                                --build-arg BRANCH=develop . -t gitstats-image:${REPOSITORY_NAME_SCHEDULE_FRONTEND}
                                '''
                            }
                        }
                        stage('Copying stats from container') {
                            steps {
                                sh '''docker run --name ${REPOSITORY_NAME_SCHEDULE_FRONTEND} -d gitstats-image:${REPOSITORY_NAME_SCHEDULE_FRONTEND} tail -f /dev/null && \
                                mkdir ${REPOSITORY_NAME_SCHEDULE_FRONTEND} && docker cp ${REPOSITORY_NAME_SCHEDULE_FRONTEND}:/stats ./${REPOSITORY_NAME_SCHEDULE_FRONTEND}
                                '''
                            }
                        }
                        stage('S3 cleanup and upload stats') {
                            steps {
                                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'profile-iosi-aws']]) {
                                    sh 'aws s3 rm s3://${BUCKET_NAME}/${REPOSITORY_NAME_SCHEDULE_FRONTEND}/* --recursive'
                                    sh 'aws s3 cp ./${REPOSITORY_NAME_SCHEDULE_FRONTEND} s3://${BUCKET_NAME}/${REPOSITORY_NAME_SCHEDULE_FRONTEND} --recursive'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        cleanup {
            sh '''
                docker container prune -f
                docker rm $(docker ps -aq) -f
                docker rmi $(docker images -aq) -f
                docker images
            '''
            dir("${WORKSPACE}@tmp") { deleteDir() }
            deleteDir()
        }
    }
}